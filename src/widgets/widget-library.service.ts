import { Injectable }                       from '@angular/core';
import { InputComponent }                   from './default_widgets/input/input.component';
import { ButtonComponent }                  from './default_widgets/button/button.component';
import { NumberComponent }                  from './default_widgets/number/number.component';
import { CheckBoxComponent }                from './default_widgets/checkbox/checkbox.component';
import { SelectComponent }                  from './default_widgets/select/select.component';
import { RadioComponent }                   from './default_widgets/radio/radio.component';
import { DropDownMenuComponent }            from './default_widgets/drop-down-menu/drop-down-menu.component';
import { TextAreaComponent }                from './default_widgets/textarea/textarea.component';
import { MiniButtonComponent }              from './default_widgets/mini-button/mini-button.component';
import { AutoCompleteInputComponent }       from './default_widgets/input-autocomplete/input-autocomplete.component';
import { DatePickerComponent }              from './default_widgets/datepicker/datepicker.component';
import { TableComponent }                   from './default_widgets/table/table.component';


@Injectable()
export class WidgetLibraryService {

  defaultWidget: string = 'string';
  widgetLibrary: any = {

    'text': InputComponent,
    'hidden': InputComponent,
    'string': InputComponent,
    'button': ButtonComponent,
    'submit': ButtonComponent,
    'number': NumberComponent,
    'integer': NumberComponent,
    'checkbox': CheckBoxComponent,
    'select': SelectComponent,
    'radio': RadioComponent,
    'dropDownMenu': DropDownMenuComponent,
    'textarea': TextAreaComponent,
    'miniButton': MiniButtonComponent,
    'autoCompleteInput': AutoCompleteInputComponent,
    'datePicker' : DatePickerComponent,
    'table': TableComponent
    // // Angular JSON Schema Form administrative widgets
    // 'none': NoneComponent, // Placeholder, for development - displays nothing
    // 'root': RootComponent, // Form root, renders a complete layout
    // 'select-framework': SelectFrameworkComponent, // Applies the selected framework to a specified widget
    // 'select-widget': SelectWidgetComponent, // Displays a specified widget
    // '$ref': AddReferenceComponent, // Button to add a new array item or $ref element

    // Free-form text HTML 'input' form control widgets <input type="...">
    // 'email': 'text',
    // 'integer': 'number', // Note: 'integer' is not a recognized HTML input type
    // 'number': NumberComponent,
    // 'password': 'text',
    // 'search': 'text',
    // 'tel': 'text',

    // 'url': 'text',

    // Controlled text HTML 'input' form control widgets <input type="...">
    // 'color': 'text',
    // 'date': 'text',
    // 'datetime': 'text',
    // 'datetime-local': 'text',
    // 'month': 'text',
    // 'range': 'number',
    // 'time': 'text',
    // 'week': 'text',

    // Non-text HTML 'input' form control widgets <input type="...">
    // 'button': <input type="button"> not used, use <button> instead
    // 'checkbox': CheckboxComponent, // TODO: Set ternary = true for 3-state ??
    // 'file': FileComponent, // TODO: Figure out how to handle these
    // 'hidden': 'text',
    // 'image': 'text', // TODO: Figure out how to handle these
    // 'radio': 'radios',
    // 'reset': 'submit', // TODO: Figure out how to handle these
    // 'submit': SubmitComponent,

    // Other (non-'input') HTML form control widgets
    // 'button': ButtonComponent,
    // 'select': SelectComponent,
    // // 'optgroup': TODO: automatically generated by select widgets (how?)
    // // 'option': automatically generated by select widgets
    // 'textarea': TextareaComponent,

    // HTML form control widget sets
    // 'checkboxes': CheckboxesComponent, // Grouped list of checkboxes
    // 'checkboxes-inline': 'checkboxes', // Checkboxes in one line
    // 'checkboxbuttons': 'checkboxes', // Checkboxes as html buttons
    // 'radios': RadiosComponent, // Grouped list of radio buttons
    // 'radios-inline': 'radios', // Radio controls in one line
    // 'radiobuttons': 'radios', // Radio controls as html buttons

    // HTML Layout widgets
    // 'label': automatically added to data widgets
    // 'legend': automatically added to fieldsets
    // 'section': SectionComponent, // Just a div <div>
    // 'div': 'section', // Still just a div <div>
    // 'fieldset': 'section', // A fieldset, with an optional legend <fieldset>
    // 'flex': 'section', // A flexbox container <div style="display: flex">
    //
    // // Non-HTML layout widgets
    // 'array': 'section', // A list you can add, remove and reorder <fieldset>
    // 'tabarray': 'tabs', // A tabbed version of array
    // 'tab': 'section', // A tab group, similar to a fieldset or section <fieldset>
    // 'tabs': TabsComponent, // A tabbed set of panels with different controls
    // 'message': MessageComponent, // Insert arbitrary html
    // 'help': 'message', // Insert arbitrary html
    // 'msg': 'message', // Insert arbitrary html
    // 'html': 'message', // Insert arbitrary html
    // 'template': TemplateComponent, // Insert a custom Angular component

    // Widgets included for compatibility with JSON Form API
    // 'advancedfieldset': 'section', // Adds 'Advanced settings' title <fieldset>
    // 'authfieldset': 'section', // Adds 'Authentication settings' title <fieldset>
    // 'optionfieldset': 'section', // Option control, displays selected sub-item <fieldset>
    // 'selectfieldset': 'section', // Select control, displays selected sub-item <fieldset>
    // 'conditional': 'section', // Identical to 'section' (depeciated) <div>
    // 'actions': 'section', // Horizontal button list, can only submit, uses buttons as items <div>
    // 'tagsinput': 'section', // For entering short text tags <div>
    // // See: http://ulion.github.io/jsonform/playground/?example=fields-checkboxbuttons
    //
    // // Widgets included for compatibility with React JSON Schema Form API
    // 'updown': 'number',
    // 'date-time': 'text',
    // 'alt-datetime': 'text',
    // 'alt-date': 'text',

    // Widgets included for compatibility with Angular Schema Form API
    // 'wizard': 'section', // TODO: Sequential panels with "Next" and "Previous" buttons

    // Recommended 3rd-party add-on widgets (TODO: create wrappers for these...)
    // 'ng2-select': Select control replacement - http://valor-software.com/ng2-select/
    // 'flatpickr': Flatpickr date picker - https://github.com/chmln/flatpickr
    // 'pikaday': Pikaday date picker - https://github.com/dbushell/Pikaday
    // 'spectrum': Spectrum color picker - http://bgrins.github.io/spectrum
    // 'bootstrap-slider': Bootstrap Slider range control - https://github.com/seiyria/bootstrap-slider
    // 'ace': ACE code editor - https://ace.c9.io
    // 'ckeditor': CKEditor HTML / rich text editor - http://ckeditor.com
    // 'tinymce': TinyMCE HTML / rich text editor - https://www.tinymce.com
    // 'imageselect': Bootstrap drop-down image selector - http://silviomoreto.github.io/bootstrap-select
    // 'wysihtml5': HTML editor - http://jhollingworth.github.io/bootstrap-wysihtml5
    // 'quill': Quill HTML / rich text editor (?) - https://quilljs.com
  };
  registeredWidgets: any = { };
  frameworkWidgets: any = { };
  activeWidgets: any = { };

  constructor() {
    this.setActiveWidgets();
  }

  setActiveWidgets() {
    this.activeWidgets = Object.assign(
      { }, this.widgetLibrary, this.frameworkWidgets, this.registeredWidgets
    );
    for (let widgetName of Object.keys(this.activeWidgets)) {
      let widget: any = this.activeWidgets[widgetName];
      // Resolve aliases
      if (typeof widget === 'string') {
        let usedAliases: string[] = [];
        while (typeof widget === 'string' && usedAliases.indexOf(widget) === -1) {
          usedAliases.push(widget);
          widget = this.activeWidgets[widget];
        }
        if (typeof widget !== 'string') {
          this.activeWidgets[widgetName] = widget;
        }
      }
    }
  }

  registerWidget(type: string, widget: any): boolean {
    if (!type || !widget || typeof type !== 'string') { return false; }
    this.registeredWidgets[type] = widget;
    this.setActiveWidgets();
    return true;
  }

  unRegisterWidget(type: string): boolean {
    if (!type || typeof type !== 'string' ||
      !this.registeredWidgets.hasOwnProperty(type)) { return false; }
    delete this.registeredWidgets[type];
    this.setActiveWidgets();
    return true;
  }

  /*setDefaultWidget(type: string): boolean {
    if (!this.hasWidget(type)) { return false; }
    this.defaultWidget = type;
    return true;
  }

  hasWidget(type: string, widgetSet: string = 'activeWidgets'): boolean {
    if (!type || typeof type !== 'string') { return false; }
    return this[widgetSet].hasOwnProperty(type);
  }

  hasDefaultWidget(type: string): boolean {
    return this.hasWidget(type, 'widgetLibrary');
  }



  unRegisterAllWidgets(unRegisterFrameworkWidgets: boolean = true): boolean {
    this.registeredWidgets = { };
    if (unRegisterFrameworkWidgets) { this.frameworkWidgets = { }; }
    this.setActiveWidgets();
    return true;
  }

  registerFrameworkWidgets(widgets: any): boolean {
    if (widgets === null || typeof widgets !== 'object') { return false; }
    this.frameworkWidgets = widgets;
    this.setActiveWidgets();
    return true;
  }

  unRegisterFrameworkWidgets(): boolean {
    if (Object.keys(this.frameworkWidgets).length) {
      this.frameworkWidgets = { };
      this.setActiveWidgets();
    }
    return true;
  }

  getWidget(type?: string, widgetSet: string = 'activeWidgets'): any {
    if (this.hasWidget(type, widgetSet)) {
      return this[widgetSet][type];
    } else if (this.hasWidget(this.defaultWidget, widgetSet)) {
      return this[widgetSet][this.defaultWidget];
    } else {
      return null;
    }
  }

  getAllWidgets(): any {
    return {
      widgetLibrary: this.widgetLibrary,
      registeredWidgets: this.registeredWidgets,
      frameworkWidgets: this.frameworkWidgets,
      activeWidgets: this.activeWidgets,
    };
  }*/
}
